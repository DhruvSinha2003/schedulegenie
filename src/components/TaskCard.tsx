// components/TaskCard.tsx
"use client";

import { formatForGoogleCalendar, parseTaskDateTime } from "@/lib/dateUtils"; // Import utils
import { Task } from "@/types/task";
import Link from "next/link"; // Keep Link import for client-side navigation
import { useMemo } from "react";
import {
  FaCalendarPlus,
  FaEdit,
  FaRegCheckSquare,
  FaRegSquare,
  FaRobot,
  FaSpinner,
  FaTrashAlt,
} from "react-icons/fa";

interface TaskCardProps {
  task: Task;
  onToggleComplete: (taskId: string, currentStatus: boolean) => Promise<void>;
  onDelete: (taskId: string) => Promise<void>;
  onEdit: (task: Task) => void;
  isPending: boolean;
}

export default function TaskCard({
  task,
  onToggleComplete,
  onDelete,
  onEdit,
  isPending,
}: TaskCardProps) {
  const displayDayName = useMemo(() => {
    try {
      const date = new Date(task.day);
      // Check if it's a valid date AND not just a year/number
      if (!isNaN(date.getTime()) && !/^\d+$/.test(task.day.trim())) {
        // Use 'short' for abbreviation like "Sat"
        return date.toLocaleDateString("en-US", { weekday: "short" });
      }
    } catch {
      // Ignore errors if parsing fails
    }
    // Return empty string if it's not a parseable date or just a day name
    return "";
  }, [task.day]);

  // Calculate Google Calendar link using useMemo
  const googleCalendarLink = useMemo(() => {
    const { start, end } = parseTaskDateTime(task); // Use current date as reference implicitly
    if (!start || !end) {
      return null; // Can't generate link if parsing fails
    }

    const startDateStr = formatForGoogleCalendar(start);
    const endDateStr = formatForGoogleCalendar(end);

    if (!startDateStr || !endDateStr) return null;

    const baseUrl =
      "https://calendar.google.com/calendar/render?action=TEMPLATE";
    const params = new URLSearchParams({
      text: task.content,
      dates: `${startDateStr}/${endDateStr}`, // Use local time format
      details:
        task.notes || `Generated by ScheduleGenie for task: ${task.content}`,
      // ctz: 'Your/Timezone' // Optional: Explicitly set timezone if needed
    });

    return `${baseUrl}&${params.toString()}`;
  }, [task]); // Recalculate if the task object changes

  const handleToggle = () => {
    if (!isPending) onToggleComplete(task.taskId, task.isCompleted);
  };
  const handleDelete = () => {
    if (!isPending) onDelete(task.taskId);
  };
  const handleEdit = () => {
    if (!isPending) onEdit(task);
  };

  // Function to open the GCal link
  const handleAddToGoogleCalendar = () => {
    if (googleCalendarLink && !isPending) {
      window.open(googleCalendarLink, "_blank", "noopener,noreferrer");
    } else if (!isPending) {
      alert(
        "Could not parse date/time for this task to create a Google Calendar link."
      );
    }
  };

  return (
    <div
      className={`bg-white rounded-md p-3 shadow hover:shadow-md transition-shadow flex items-start space-x-3 ${
        task.isCompleted ? "opacity-60" : ""
      } ${isPending ? "cursor-wait opacity-70" : ""}`}
    >
      {/* Checkbox / Spinner */}
      <button
        onClick={handleToggle}
        disabled={isPending}
        className={`flex-shrink-0 mt-1 text-lg ${
          isPending
            ? "text-gray-400" // Spinner color
            : task.isCompleted
            ? "text-green-500" // Completed color
            : "text-gray-400 hover:text-green-600" // Incomplete color + hover
        }`}
        title={task.isCompleted ? "Mark as incomplete" : "Mark as complete"}
        aria-label={
          task.isCompleted ? "Mark as incomplete" : "Mark as complete"
        }
      >
        {isPending ? (
          <FaSpinner className="animate-spin" />
        ) : task.isCompleted ? (
          <FaRegCheckSquare />
        ) : (
          <FaRegSquare />
        )}
      </button>

      {/* Task Content */}
      <div className="flex-grow min-w-0">
        <p
          className={`text-sm font-medium text-gray-800 break-words ${
            task.isCompleted ? "line-through" : ""
          }`}
        >
          {task.content}
        </p>
        {/* Display formatted day name if available */}
        <p className="text-xs text-gray-500 mt-1">
          {displayDayName ? `${displayDayName}, ` : ""}
          {task.day} â€¢ {task.time}
        </p>
        {task.notes && (
          <p className="text-xs italic text-gray-400 mt-1 break-words">
            Notes: {task.notes}
          </p>
        )}
      </div>

      {/* Action Buttons Group / Spinner */}
      <div className="flex flex-col items-center space-y-1 ml-auto flex-shrink-0 pl-1">
        {isPending ? (
          // Show only spinner when pending
          <FaSpinner className="animate-spin text-gray-400 mt-1" size={14} />
        ) : (
          // Show action buttons when not pending
          <>
            {/* Google Calendar Button */}
            <button
              onClick={handleAddToGoogleCalendar}
              disabled={!googleCalendarLink} // Disable only if link generation failed
              className={`p-1 transition-colors ${
                googleCalendarLink
                  ? "text-gray-400 hover:text-blue-600" // Active state
                  : "text-gray-300 cursor-not-allowed" // Disabled state
              }`}
              title={
                googleCalendarLink
                  ? "Add to Google Calendar"
                  : "Cannot parse date/time for GCal"
              }
              aria-label="Add to Google Calendar"
            >
              <FaCalendarPlus size={15} />
            </button>

            {/* Edit Button */}
            <button
              onClick={handleEdit}
              className="text-gray-400 hover:text-blue-500 transition-colors p-1"
              title="Edit task"
              aria-label="Edit task"
              disabled={isPending} // Although covered by outer conditional, good practice
            >
              <FaEdit size={15} />
            </button>

            {/* AI Chat Link - MODIFIED */}
            <Link
              href={`/chat/${task.taskId}`}
              className={`p-1 transition-colors text-gray-500 hover:text-blue-600 ${
                // Default gray, hover blue
                isPending ? "pointer-events-none opacity-50" : "" // Still handle pending state visually/functionally
              }`}
              title="Get AI help with this task"
              aria-label="AI Assistant Chat"
              onClick={(e) => {
                // Prevent navigation if pending (though Link might handle this too)
                if (isPending) e.preventDefault();
              }}
              aria-disabled={isPending}
              tabIndex={isPending ? -1 : 0} // Improve accessibility for disabled state
            >
              <FaRobot size={16} />
            </Link>

            {/* Delete Button */}
            <button
              onClick={handleDelete}
              className="text-gray-400 hover:text-red-500 transition-colors p-1"
              title="Delete task"
              aria-label="Delete task"
              disabled={isPending} // Although covered by outer conditional, good practice
            >
              <FaTrashAlt size={14} />
            </button>
          </>
        )}
      </div>
    </div>
  );
}
